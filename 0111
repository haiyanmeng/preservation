The summary of the discussion with Dr. Thain on Friday afternoon:
Firstly, let us suppose there is one reader who is interested in challenging your idea called challenger.
<1> motivation of DASPOS
The starting point is: Matthias finished his experiment and published his workflow in email format and experimental results. some other scholars want to repeat the experiment.

one possible solution:
one dialogue:
challenger says: the scholar, who wants to repeat the experiment, can directly do it used the workflow and experimental results published by the original author.

mhy says: no. the workflow is too general, includes different links. The scholar may lose his interest because the workflow is not so clear and jumping from different links.
    The workflow is too complex to horiffy the scholar. The software sources of one program is plentiful. In Matthias's example, the sources of software includes CMSSW, GIT, HTTP.
    Some part of the workflow is unrepeatible. The authority access problem of experimental data from grid. (refer to the paper version). One noting thing is that Matthias preserved the data from grid into HDFS mounted as one local filesystem.

implication: directly repeating the experiment using the published workflow and results is too difficulty. Some extra work must be done to make the repeating process easier.

one dialogue:
challenger says: as for the data access problem, why not let the new user directly operate on the machine the original user used?
    as for the workflow problem, why not let Matthias generate one clear script including all the contents from different links?
       
mhy says: letting all new users to access the earth machine is unsafe.
    even if mathias can provide one complete script, getting software from different sources and compiling them is time-consumpting and difficult for the new users especially the new user is not so familiar with the softwares.

here, we can use the 2nd solution to support our viewpoint.

implication: the data must be provided to the new users in some way. the data must be published so that the new user can obtain them easily.
    all the involved softwares should also be provided to the new users.
    in addition, the requirement of the underlying os and hardware should also be provided to the new users.

one package containing all the necessary data, software, and os requirement should be provided.

one dialogue:
challenger says: oooh. We can let the original author generate and publish the required package.

mhy says: Even if the original author understood the working process of the whole experiment. Letting the original author to provide the package which can be used by other scholars to repeat the original experiment is unrealistic. Because:
    figuring out the underlying dependency of each software is complex and time-consumpting (The software sources of one program is plentiful. In Matthias's example, the sources of software includes CMSSW, GIT, HTTP) and even impossible for the original author. *****hmeng: some example to illustrate the difficulty. The machine used for the experiment is one public machine of physics department, and Matthias is one common user without root authority. All the underlying OS and supporting softwares are installed and maintained by the IT department of the university.
    How to design the architecture of the package to preserve data software is not under the the research field of physicts. 

implication: one easy preservation mechanism should be provided to the original author to help them to preserve the software, data, and underlying environment.    

here, we can use the 3rd solution to support our point. emphasize the easy operation of the packaging utility.

here, the comparison of the second and the third solution.


Evaluation of the third solution:
[1] up till now, the underlying os and hardware requirement is only described in the script. However, there are some other options. For example, we can figure out the underlying dependency and preserve all the data, software, os, hardware as one WM. 
*****lack: the comparison of these two solutions.

[2] granularity of preservation. parrot's is file. maybe we can use package as the unit.

[3] the 4th solution. software version.















